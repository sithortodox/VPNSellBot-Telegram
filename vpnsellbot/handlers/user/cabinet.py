from datetime import datetime

from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy import select, desc

from vpnsellbot.config import get_settings
from vpnsellbot.db.dao import get_session
from vpnsellbot.db.models import User, BalanceTransaction, Subscription
from vpnsellbot.keyboards.user_kb import main_menu_keyboard

settings = get_settings()
router = Router(name="user_cabinet")


@router.message(Command("cabinet"))
async def cabinet_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cabinet.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id

    async with get_session() as session:
        user = await session.get(User, user_id)
        if not user:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏–º /start
            return await message.reply(
                "‚ùóÔ∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start."
            )

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        tx_stmt = (
            select(BalanceTransaction)
            .where(BalanceTransaction.user_id == user_id)
            .order_by(desc(BalanceTransaction.created_at))
            .limit(settings.default_page_size)
        )
        tx_result = await session.execute(tx_stmt)
        transactions = tx_result.scalars().all()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        sub_stmt = (
            select(Subscription)
            .where(Subscription.user_id == user_id)
            .order_by(desc(Subscription.created_at))
            .limit(settings.default_page_size)
        )
        sub_result = await session.execute(sub_stmt)
        subscriptions = sub_result.scalars().all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    lines = [f"üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b> ‚Äî {user.first_name}\n"]

    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    lines.append("üí≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>")
    if transactions:
        for tx in transactions:
            ts = tx.created_at.strftime("%Y-%m-%d %H:%M")
            amt = tx.amount
            desc = tx.description or ""
            lines.append(f"{ts} ‚Äî +{amt} {desc}")
    else:
        lines.append("–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")

    # –ü–æ–¥–ø–∏—Å–∫–∏
    lines.append("\nüîî <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>")
    if subscriptions:
        for sub in subscriptions:
            start = sub.start_at.strftime("%Y-%m-%d")
            end = sub.end_at.strftime("%Y-%m-%d")
            status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if sub.active else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
            lines.append(f"{sub.plan}: {start} ‚Üí {end} ({status})")
    else:
        lines.append("–ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")

    text = "\n".join(lines)

    await message.answer(text, reply_markup=main_menu_keyboard())
